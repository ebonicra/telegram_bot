from collections import defaultdict
import json
import sqlite3

INTOXICATION = {
    0: "–±–µ–ª–æ—á–µ–∫",
    1: "–±–µ–ª–æ—á–∫—É",
    2: "–±–µ–ª–æ—á–∫–∏",
    3: "–±–µ–ª–æ—á–∫–∏",
    4: "–±–µ–ª–æ—á–∫–∏",
    5: "–±–µ–ª–æ—á–µ–∫",
    6: "–±–µ–ª–æ—á–µ–∫",
    7: "–±–µ–ª–æ—á–µ–∫",
    8: "–±–µ–ª–æ—á–µ–∫",
    9: "–±–µ–ª–æ—á–µ–∫",
    10: "–±–µ–ª–æ—á–µ–∫",
    11: "–±–µ–ª–æ—á–µ–∫",
    12: "–±–µ–ª–æ—á–µ–∫",
    13: "–±–µ–ª–æ—á–µ–∫",
    14: "–±–µ–ª–æ—á–µ–∫",
    15: "–±–µ–ª–æ—á–µ–∫"
}

SHOT = {
    1: "—à–æ—Ç",
    2: "—à–æ—Ç–∞",
    3: "—à–æ—Ç–∞",
    4: "—à–æ—Ç–∞",
    5: "—à–æ—Ç–æ–≤",
    6: "—à–æ—Ç–æ–≤"
}


class Protagonist:
    def __init__(self, user_id: str, name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –ü—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç–∞ (–£–ª–∏—Ç–∫–∏).
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - user_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–æ–∫–∞).
        - name: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–æ–∫–∞).
        """
        self.id = user_id
        self.type = "–£–ª–∏—Ç–∫–∞"
        self.name = name
        self.current_location_id = 1
        self.money = 2000
        self.intoxication_level = 1000
        self.knowledge = 0
        self.alcohol_knowledge = defaultdict(str)
        self.cocktail_recipes = defaultdict(str)
        self.bartender_items = defaultdict(str)
        self.other_items = defaultdict(str)

    def save_to_db(self, db_file: str = 'game.db') -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - db_file: –∏–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∞).
        """
        with sqlite3.connect(db_file) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (user_id, type, name, current_location_id, money, intoxication_level, knowledge, alcohol_knowledge, cocktail_recipes, bartender_items, other_items) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                           (self.id, self.type, self.name, self.current_location_id, self.money, self.intoxication_level, self.knowledge, json.dumps(self.alcohol_knowledge), json.dumps(self.cocktail_recipes), json.dumps(self.bartender_items), json.dumps(self.other_items)))
            conn.commit()

    def whoami(self, db_file: str = 'game.db') -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - db_file: –∏–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∞).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        """
        with sqlite3.connect(db_file) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT name, money, intoxication_level, knowledge FROM users WHERE user_id = ?", (self.id,))
            user = cursor.fetchone()
        if user:
            name, money, intoxication_level, knowledge = user
            intoxication_level = intoxication_level // 1000
            intoxication = INTOXICATION.get(intoxication_level)
            return (f"üêå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è üêå\n\n"
                    f"–î–æ—Ä–æ–≥–∞—è —É–ª–∏—Ç–æ—á–∫–∞, —Ç–µ–±—è –∑–æ–≤—É—Ç {name}, —É–∂–µ –≤—Å–µ —Å–≤–æ–∏ —É–ª–∏—Ç–æ—á–Ω—ã–µ –º–æ–∑–≥–∏ –ø—Ä–æ–ø–∏–ª–∞, —Ä–∞–∑ –∏–º—è –∑–∞–±—ã–≤–∞–µ—à—å.\n"
                    f"–ü—å—è–Ω–∞ —Ç—ã —É–∂–µ –Ω–∞ {intoxication_level} {intoxication} –∏–∑ 10\n"
                    f"Money for drink –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {money}$\n"
                    f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–π–∫—å—é —Ä–∞–≤–µ–Ω {knowledge}")
        else:
            return "–¢–∞–∫–æ–π —É–ª–∏—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"

    def whereami(self) -> tuple:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –ö–æ—Ä—Ç–µ–∂ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏.
        """
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT current_location_id FROM users WHERE user_id = ?', (self.id,))
            location_id = cursor.fetchone()[0]
            self.current_location_id = location_id
            cursor.execute(
                'SELECT name, description, song, smell, image FROM locations WHERE id = ?', (location_id,))
            location = cursor.fetchone()
            name, description, song, smell, image = location
            return image, (f"–õ–æ–∫–∞—Ü–∏—è: {name}\n"
                           f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                           f"–ú—É–∑—ã–∫–∞: {song}\n"
                           f"–ê—Ä–æ–º–∞—Ç: {smell}\n")

    def go(self, new_location_id: int) -> None:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - new_location_id: –Ω–æ–≤—ã–π ID –ª–æ–∫–∞—Ü–∏–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        """
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE users SET current_location_id = ? WHERE user_id = ?', (new_location_id, self.id))

    def send_inventory(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –∑–Ω–∞–Ω–∏—è—Ö, —Ä–µ—Ü–µ–ø—Ç–∞—Ö, –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - True, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT alcohol_knowledge, cocktail_recipes, bartender_items, other_items FROM users WHERE user_id = ?', (self.id,))
            user_data = cursor.fetchone()
            if user_data:
                alcohol_knowledge, cocktail_recipes, bartender_items, other_items = user_data
                self.alcohol_knowledge = json.loads(alcohol_knowledge)
                self.cocktail_recipes = json.loads(cocktail_recipes)
                self.bartender_items = json.loads(bartender_items)
                self.other_items = json.loads(other_items)
                return True
            else:
                return False

    def send_inventory_type(self, type_inventory: str) -> list:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - type_inventory: —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è ('knowledge', 'recipes', 'items', 'other').
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
        """
        inventory_map = {
            'knowledge': ('–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è', self.alcohol_knowledge, "üçæ"),
            'recipes': ('—Ä–µ—Ü–µ–ø—Ç—ã –∫–æ–∫—Ç–µ–π–ª–µ–π', self.cocktail_recipes, "üçπ"),
            'items': ('–±–∞—Ä–º–µ–Ω—Å–∫–∏–µ —à—Ç—É–∫–∏', self.bartender_items, "ü´ó"),
            'other': ('–ø—Ä–∏–∫–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∫—É–ø–∏–ª–∏', self.other_items, "ü§°"),
        }
        title, inventory, emoji = inventory_map.get(
            type_inventory, ('', {}, ''))
        if not inventory:
            return [f"–ê –Ω–µ—Ç, –Ω–µ—Ç—É —É —Ç–µ–±—è –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –≤ {title}. –ü–æ–Ω–∏–º–∞–µ—à—å? –ù–ò –ö–ê –ö–ò–•"]
        response = [f"\n{title.capitalize()}:\n"]
        for k, v in inventory.items():
            if type_inventory == 'other':
                response.append(f"{emoji} {k} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {v} —à—Ç\n")
            else:
                response.append(f"{emoji} {k}: {v}\n")
        return response

    def drink(self, snail_roll: int) -> list:
        """
        –ü—Ä–æ—Ü–µ—Å—Å —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - snail_roll: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è.
        """
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT intoxication_level, knowledge FROM users WHERE user_id = ?', (self.id,))
            user_data = cursor.fetchone()
            if not user_data:
                return "–¢–∞–∫–æ–π —É–ª–∏—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
            self.intoxication_level, self.knowledge = user_data

        response = []
        snail_loss = snail_roll * 1000 - self.knowledge * 50
        if snail_loss < 0:
            snail_loss = 0

        shot = SHOT.get(snail_roll)
        response.append(f"üòç Let's drink üòç\n–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–ø–∏—Ç—å {snail_roll} {shot}.")
        response.append(
            f"–£—Ä–æ–Ω —Ç–≤–æ–µ–π –Ω–µ–∂–Ω–æ–π –ø–µ—á–µ–Ω–∏ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç {snail_loss} —Ñ–µ–µ—á–µ–∫ –≤–∏—á.")

        self.intoxication_level += snail_loss
        avaliable_level = 10 - (self.intoxication_level // 1000)
        if self.intoxication_level >= 10000:
            response.append(
                "–ú–∞–ª—ã—à–∫–∞ - —Ç—ã –Ω–∞–ø–∏–ª–∞—Å—å.\n–•–æ—Ä–æ—à–æ —Ö–æ—Ç—å, —á—Ç–æ —Ç—ã —É–ª–∏—Ç–∫–∞ –∏ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≥, –∏–Ω–∞—á–µ –±—ã —É–∂–µ —Å–≤–∞–ª–∏–ª–∞—Å—å.")
            response.append(
                "–°–æ–≤–µ—Ç—É—é –Ω–∞–≤–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ–≥–æ –±–µ–ª–æ–≥–æ –¥—Ä—É–≥–∞ –≤ —É–±–æ—Ä–Ω–æ–π –∏ —á—É—Ç—å –ø—Ä–æ—Ç—Ä–µ–∑–≤–µ—Ç—å, —á—Ç–æ–± –µ—â—ë –Ω–∞–¥—Ä–∞—Ç—å –∑–∞–¥–Ω–∏—Ü—ã —ç—Ç–∏–º –±–∞—Ä–º–µ–Ω–∞–º.")
        else:
            response.append("–ù–µ —É–º–µ—Ä–ª–∞ –∏ —Å–ª–∞–≤–∞ —É–ª–∏—Ç–æ—á–Ω–æ–º—É –±–æ–≥—É.")
            response.append(
                f"–ù–æ —É—á—Ç–∏, –¥–æ —Ç–≤–æ–µ–≥–æ –æ–ø—å—è–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {avaliable_level} —É—Ä–æ–≤–Ω–µ–π –∫–∞–π—Ñ–∞.")
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET intoxication_level = ? WHERE user_id = ?',
                           (self.intoxication_level, self.id))
            conn.commit()
        return response


class NPC:
    def __init__(self, type: str, name: str, location_id: int, dialogue: str, knowledge_info: str, recipe_info: str, bartender_info: str, quest: str, dialogue_done: int,  knowledge_done: int, recipe_done: int, bartender_done: int, quest_done: int, user: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ NPC.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - type: —Ç–∏–ø NPC (—Å—Ç—Ä–æ–∫–∞).
        - name: –∏–º—è NPC (—Å—Ç—Ä–æ–∫–∞).
        - location_id: ID –ª–æ–∫–∞—Ü–∏–∏ NPC (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        - dialogue: –¥–∏–∞–ª–æ–≥ NPC (—Å—Ç—Ä–æ–∫–∞).
        - knowledge_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ NPC –º–æ–∂–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è (—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–∞–∑–≤–∞–Ω–∏–µ-–æ–ø–∏—Å–∞–Ω–∏–µ").
        - recipe_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ü–µ–ø—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π NPC –º–æ–∂–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è (—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–∞–∑–≤–∞–Ω–∏–µ-–æ–ø–∏—Å–∞–Ω–∏–µ").
        - bartender_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π NPC –º–æ–∂–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è (—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–∞–∑–≤–∞–Ω–∏–µ-–æ–ø–∏—Å–∞–Ω–∏–µ").
        - quest: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–µ—Å—Ç–µ NPC (—Å—Ç—Ä–æ–∫–∞).
        - dialogue_done: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞.
        - knowledge_done: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å–∫–∞–∑–∞ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–Ω–∏—è.
        - recipe_done: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å–∫–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–∞.
        - bartender_done: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å–∫–∞–∑–∞ –æ –±–∞—Ä–º–µ–Ω—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ.
        - quest_done: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞.
        - user: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        """
        self.type = type
        self.name = name
        self.location_id = location_id
        self.dialogue = dialogue
        self.knowledge_info = knowledge_info
        self.recipe_info = recipe_info
        self.bartender_info = bartender_info
        self.quest = quest
        self.dialogue_done = dialogue_done
        self.knowledge_done = knowledge_done
        self.recipe_done = recipe_done
        self.bartender_done = bartender_done
        self.quest_done = quest_done
        self.user = user

    def save_to_db(self, db_file: str = 'game.db') -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NPC –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - db_file: –∏–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∞).
        """
        with sqlite3.connect(db_file) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO npc (type, name, location_id, dialogue, knowledge_info, recipe_info, bartender_info, quest, user) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                           (self.type, self.name, self.location_id, self.dialogue, self.knowledge_info, self.recipe_info, self.bartender_info, self.quest, self.user))
            conn.commit()

    def share_knowledge(self):
        """
        –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–± –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏–µ–º –æ—Ç –ù–ü–° —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–Ω–∞–Ω–∏–∏.
        """
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT knowledge, alcohol_knowledge FROM users WHERE user_id = ?', (self.user,))
            user_data = cursor.fetchone()
            if not user_data:
                return "–¢–∞–∫–æ–π —É–ª–∏—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
            knowledge, alcohol_knowledge_json = user_data
            alcohol_knowledge = json.loads(alcohol_knowledge_json)
            alco, alco_description = self.knowledge_info.split('-')
            if alco in alcohol_knowledge:
                return f"I'm so sorry, –Ω–æ —Ç—ã —Ç—É–ø–∏—Ü–∞, —è —Ç–µ–±–µ —É–∂–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª, —á—Ç–æ —Ç–∞–∫–æ–µ {alco.lower()}"
            else:
                alcohol_knowledge[alco] = alco_description
                cursor.execute(
                    'UPDATE users SET knowledge = ?, alcohol_knowledge = ? WHERE user_id = ?',
                    (knowledge + 1, json.dumps(alcohol_knowledge,
                     ensure_ascii=False), self.user)
                )
                conn.commit()
                return f"{alco} - {alco_description}"

    def share_recipe(self):
        """
        –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–± –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ü–µ–ø—Ç–æ–º –æ—Ç –ù–ü–° —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–Ω–∞–Ω–∏–∏.
        """
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT knowledge, cocktail_recipes FROM users WHERE user_id = ?', (self.user,))
            user_data = cursor.fetchone()
            if not user_data:
                return "–¢–∞–∫–æ–π —É–ª–∏—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
            knowledge, cocktail_recipes_json = user_data
            cocktail_recipes = json.loads(cocktail_recipes_json)
            recipe, recipe_description = self.recipe_info.split('-')
            if recipe in cocktail_recipes:
                return f"–û—É—É, —Ç—ã –∂–µ —É–∂–µ –∑–Ω–∞–µ—à—å {recipe.lower()}, –≤–æ–ø—Ä–æ—Å –≤ –¥—Ä—É–≥–æ–º, –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—à—å –ª–∏ —Ç—ã –µ–≥–æ —Ö–æ—Ç—å —Ä–∞–∑ –≤ –∂–∏–∑–Ω–∏?"
            else:
                cocktail_recipes[recipe] = recipe_description
                cursor.execute(
                    'UPDATE users SET knowledge = ?, cocktail_recipes = ? WHERE user_id = ?',
                    (knowledge + 1, json.dumps(cocktail_recipes,
                     ensure_ascii=False), self.user)
                )
                conn.commit()
                return f"{recipe} - {recipe_description}"

    def share_item(self):
        """
        –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–± –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–∞—Ä–º–µ–Ω—Å–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º –æ—Ç –ù–ü–° —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–Ω–∞–Ω–∏–∏.
        """
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT knowledge, bartender_items FROM users WHERE user_id = ?', (self.user,))
            user_data = cursor.fetchone()
            if not user_data:
                return "–¢–∞–∫–æ–π —É–ª–∏—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
            knowledge, bartender_items_json = user_data
            bartender_items = json.loads(bartender_items_json)
            item, item_description = self.bartender_info.split('-')
            if item in bartender_items:
                return f"–ù–µ, –∑–∞–π, {item.lower()} —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å. –ò–¥–∏, –≥—É–ª—è–π."
            else:
                bartender_items[item] = item_description
                cursor.execute(
                    'UPDATE users SET knowledge = ?, bartender_items = ? WHERE user_id = ?',
                    (knowledge + 1, json.dumps(bartender_items,
                     ensure_ascii=False), self.user)
                )
                conn.commit()
                return f"{item} - {item_description}"


class Enemy:
    def __init__(self, type: str, name: str, location_id: int, intoxication_level: int, knowledge: int, dialogue: str, defeated: int, user: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Enemy.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - type: —Ç–∏–ø –≤—Ä–∞–≥–∞ (—Å—Ç—Ä–æ–∫–∞).
        - name: –∏–º—è –≤—Ä–∞–≥–∞ (—Å—Ç—Ä–æ–∫–∞).
        - location_id: ID –ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–∞–≥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        - intoxication_level: —É—Ä–æ–≤–µ–Ω—å –æ–ø—å—è–Ω–µ–Ω–∏—è –≤—Ä–∞–≥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        - knowledge: —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –≤—Ä–∞–≥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        - dialogue: –¥–∏–∞–ª–æ–≥ –≤—Ä–∞–≥–∞ (—Å—Ç—Ä–æ–∫–∞).
        - defeated: —Ñ–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–∞–≥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, 0 –∏–ª–∏ 1).
        - user: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        """
        self.type = type
        self.name = name
        self.location_id = location_id
        self.intoxication_level = intoxication_level
        self.knowledge = knowledge
        self.dialogue = dialogue
        self.defeated = defeated
        self.user = user

    def save_to_db(self, db_file: str = 'game.db') -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞–≥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - db_file: –∏–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∞).
        """
        with sqlite3.connect(db_file) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO enemy (type, name, location_id, intoxication_level, knowledge, dialogue, defeated, user) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                           (self.type, self.name, self.location_id, self.intoxication_level, self.knowledge, self.dialogue, self.defeated, self.user))
            conn.commit()

    def whoisenemy(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞–≥–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–∞–≥–∞.
        """
        intoxication_level = self.intoxication_level // 1000
        intoxication = INTOXICATION.get(intoxication_level)
        return (f"–ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è, —è {self.type.lower()} {self.name}\n"
                f"–ú–æ—è —Å–∏–ª–∞, –º–æ—è –º—É–¥—Ä–æ—Å—Ç—å, –º–æ–∏ –±–∞—Ä–º–µ–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç - {self.knowledge} –∞–π–∫—å—é —Ö—Ä–æ–º–æ—Å–æ–º\n"
                f"–Ø —É–∂–µ –Ω–∞–ø–∏–ª—Å—è –Ω–∞ {intoxication_level} {intoxication} –∏–∑ 10\n\n"
                "–ò –¥–∞, —è –ø—å—é –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ, –∏ —á—ë —Ç—ã –º–Ω–µ —Å–¥–µ–ª–∞–µ—à—å?\n")

    def drink(self, enemy_roll: int, count_defeated: int) -> tuple:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–∏—Ç–∏—è –≤—Ä–∞–≥–æ–º.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - enemy_roll: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –≤—Ä–∞–≥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        - count_defeated: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (—Å—Ç—Ä–æ–∫–∏) –∏ —Ñ–ª–∞–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (True –∏–ª–∏ False).
        """
        enemy_loss = enemy_roll * 1000 - self.knowledge * 50
        response = []
        shot = SHOT.get(enemy_roll)
        response.append(
            f"{self.type} {self.name} –¥–æ–ª–∂–µ–Ω –≤—ã–ø–∏—Ç—å {enemy_roll} {shot}.")
        response.append(f"–£—Ä–æ–Ω –µ–≥–æ –ø–µ—á–µ–Ω–∏ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç {enemy_loss} —Ñ–µ–µ—á–µ–∫ –≤–∏—á.")
        self.intoxication_level += enemy_loss
        intoxication_level = self.intoxication_level // 1000
        intoxication = INTOXICATION.get(intoxication_level)
        finish = False
        with sqlite3.connect('game.db') as conn:
            cursor = conn.cursor()
            if self.intoxication_level >= 10000:
                self.defeated = 1
                response.append(
                    f"üéâ –ë–∞—Ä–º–µ–Ω {self.name} –ø—å—è–Ω –≤ –∑—é–∑—é, —Ç—ã –ø–µ—Ä–µ–ø–∏–ª –µ–≥–æ! üéâ\n\n–¢—ã –ø—Ä—è–º –º–∞—à–∏–Ω–∞ –ø–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ –∞–ª–∫–æ–≥–æ–ª—è.")
                cursor.execute('UPDATE quest SET count = ? WHERE quest_name = ? and user = ?', (
                    count_defeated + 1, 'Bartenders', self.user))
                if count_defeated + 1 == 5:
                    finish = True
            else:
                response.append("–ù–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–µ —Ñ–∞—Ä—Ç–∞–Ω—É–ª–æ, –Ω–µ –ø–µ—Ä–µ–ø–∏–ª.")
                response.append(
                    f"–≠—Ç–æ—Ç —á–µ—Ä—Ç —Ç–µ–ø–µ—Ä—å –ø—å—è–Ω –Ω–∞ {intoxication_level} {intoxication} –∏–∑ 10 —á–µ–±—É—Ä–∞—à–µ—á—å–∏—Ö.")
            cursor.execute('UPDATE enemy SET intoxication_level = ?, defeated = ? WHERE name = ? and user = ?',
                           (self.intoxication_level, self.defeated, self.name, self.user))
            conn.commit()
        return response, finish
