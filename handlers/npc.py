import time
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random

from players_classes import NPC
from database.get_db import get_npc_info, update_npc_data
from handlers import quest
from . import main_buttons

# Constants for defeated enemies
DEFEATED_ENEMY = {
    0: "üßõ‚Äç‚ôÇÔ∏è",
    1: "‚ò†Ô∏è"
}

READ_NPC = {
    0: "‚ùì",
    1: "‚ùî"
}


async def create_character_keyboard(npc_list: list, enemy_list: list) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –≤—Ä–∞–≥–æ–≤.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - npc_list: –°–ø–∏—Å–æ–∫ NPC (id, type, name).
    - enemy_list: –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ (id, type, name, defeated).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - InlineKeyboardBuilder: –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –ù–µ —Ö–æ—á—É —Å –Ω–∏–º–∏ –≥–æ–≤–æ—Ä–∏—Ç—å ‚ùå", callback_data=f"to_do")
    for npc in npc_list:
        id, type, name = npc
        keyboard.button(text=type + " " + name, callback_data=f"npc_{id}")
    for enemy in enemy_list:
        id, type, name, defeated = enemy
        keyboard.button(text=DEFEATED_ENEMY.get(defeated) +
                        " " + type + " " + name, callback_data=f"enemy_{id}")
    keyboard.adjust(1)
    return keyboard


def talk_to_npc_keyboard(npc, npc_id: int) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - npc: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NPC.
    - npc_id: ID NPC.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - InlineKeyboardBuilder: –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –£ –º–µ–Ω—è –ø—Ä–∏—Å—Ç—É–ø —Å–æ—Ü–∏–æ—Ñ–æ–±–∏–∏ ‚ùå",
                    callback_data="characters")
    keyboard.button(text=READ_NPC.get(npc.dialogue_done) + "–í–Ω—è—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–∂–∏–ª–æ–≥–æ",
                    callback_data=f"talknpc_{npc_id}_dialogue")
    if npc.knowledge_info:
        keyboard.button(text=READ_NPC.get(npc.knowledge_done) + "–£–∑–Ω–∞—Ç—å new alco –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏",
                        callback_data=f"talknpc_{npc_id}_knowledge")
    if npc.recipe_info:
        keyboard.button(text=READ_NPC.get(npc.recipe_done) + "–ü–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ –≤–∫—É—Å–æ–≤—ã–µ —Å–æ—Å–æ—á–∫–∏",
                        callback_data=f"talknpc_{npc_id}_recipe")
    if npc.bartender_info:
        keyboard.button(text=READ_NPC.get(npc.bartender_done) + "–í–∑—è—Ç—å –∫–∞–∫—É—é-—Ç–æ –±–∞—Ä–º–∞–Ω—Å–∫—É—é —Ö–µ—Ä–Ω—é",
                        callback_data=f"talknpc_{npc_id}_bartender")
    if npc.quest:
        keyboard.button(text=READ_NPC.get(npc.quest_done) + "–û–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –∑–∞ –±–∞–±–∫–∏",
                        callback_data=f"talknpc_{npc_id}_quest")
    return keyboard.adjust(1)


async def choose_npc_to_talk(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ NPC –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã—Ö.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    npc_id = int(data.split("_")[1])
    npc = get_npc_info(npc_id)
    if npc:
        response = (f"{npc.type} {npc.name} –≤–µ—â–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç—ã {random.choice(['—á—É—á—É–ª–æ', '–æ–≤–æ—â–Ω–æ–π —Å—É–ø', '–ª–æ—à–∞—Ä–∞', '–∫—É—Ä–∏—Ü–∞', '—à–∞–ª–æ–ø–∞–π', '–ø—É–≥–∞–ª–æ'])}\n\n"
                    "–û—Ç–≤–µ—Ç—å –µ–º—É, –≥–æ–ª–æ–¥—Ä–∞–Ω—Ü—É.")
        await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
        keyboard = talk_to_npc_keyboard(npc, npc_id)
        await callback_query.answer(response, reply_markup=keyboard.as_markup())
    else:
        await callback_query.answer("–ù–ü–° —Å–ª–æ–º–∞–ª–∏—Å—å –∏ –Ω–µ —Ö–æ—Ç—è—Ç —Å –≤–∞–º–∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å")


async def talk_to_npc(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã—Ö.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    data_parts = data.split('_')
    npc_id = int(data_parts[1])
    interaction_type = data_parts[2]
    npc = get_npc_info(npc_id)
    if interaction_type == "dialogue":
        update_npc_data("dialogue_done", 1, npc_id)
        await callback_query.answer("üó£ " + npc.dialogue)
    elif interaction_type == "knowledge":
        update_npc_data("knowledge_done", 1, npc_id)
        await knowledge_npc(callback_query, npc)
    elif interaction_type == "recipe":
        update_npc_data("recipe_done", 1, npc_id)
        await recipe_npc(callback_query, npc)
    elif interaction_type == "bartender":
        update_npc_data("bartender_done", 1, npc_id)
        await bartender_npc(callback_query, npc)

    if interaction_type == "quest":
        await quest.quest(callback_query, npc, npc_id, user_id)
    else:
        time.sleep(1)
        await talk_to_npc_next_keyboard(callback_query, user_id, npc_id, npc)


async def talk_to_npc_next_keyboard(callback_query: CallbackQuery, user_id: int, npc_id: int, npc: NPC) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - npc_id: ID NPC.
    - npc: NPC
    """
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí¨ –û –¥–∞, –≥–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å —Ç–≤–æ–∏ —É—Å—Ç–∞ –≤–µ—á–Ω–æ.",
                    callback_data=f"npc_{npc_id}")
    keyboard.button(
        text="ü§¶‚Äç‚ôÄÔ∏è –•–æ—á—É talk —Å –±–æ–ª–µ–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º–∏ –ª—é–¥—å–º–∏", callback_data="characters")
    keyboard.button(
        text="üëØ‚Äç‚ôÄÔ∏è –Ø —É—Å—Ç–∞–ª —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, —è —Ö–æ—á—É —Ç—É—Å–∏—Ç—å", callback_data="to_do")
    keyboard.adjust(1)
    await callback_query.answer(f"üó£ –¢—ã —Ç–∞–∫–æ–æ–æ–æ–æ–æ–æ–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n\n–ï—â—ë –ø–æ–±–æ–ª—Ç–∞—ë–º c {npc.type} {npc.name}?", reply_markup=keyboard.as_markup())


async def knowledge_npc(callback_query: CallbackQuery, npc) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π NPC.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - npc: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NPC.
    """
    await callback_query.answer("üó£ –©–∞ —Ç–∞–∫–æ–µ —Ä–∞—Å—Å–∫–∞–∂—É, –æ—Ñ–∏–≥–µ–µ—à—å.")
    time.sleep(1)
    response = npc.share_knowledge()
    if '-' in response:
        photo_name = response.split()[0]
        photo = FSInputFile(f'images/alcohol/{photo_name}.jpeg')
        await callback_query.answer_photo(photo, has_spoiler=False)
    await callback_query.answer("üó£ " + response)


async def recipe_npc(callback_query: CallbackQuery, npc) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç NPC.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - npc: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NPC.
    """
    await callback_query.answer("üó£ –†–µ—Ü–µ–ø—Ç –ø—Ä–æ—Å—Ç–æ –±–æ–º–±–∞.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π, "
                                "–∫–æ–≥–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å –¥–µ–Ω–µ–≥ –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞ –±—É—Ç—ã–ª–∫—É –±–∞–ª—Ç–∏–∫–∏ —Å–µ–º–µ—Ä–∫–∏.")
    time.sleep(1)
    response = npc.share_recipe()
    if '-' in response:
        photo_name = response.split()[1]
        photo = FSInputFile(f'images/recipes/{photo_name}.jpeg')
        await callback_query.answer_photo(photo, has_spoiler=False)
    await callback_query.answer("üó£ " + response)


async def bartender_npc(callback_query: CallbackQuery, npc) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç NPC.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - npc: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NPC.
    """
    await callback_query.answer("üó£ –°–µ–π—á–∞—Å —è —Ç–µ–±–µ –¥–∞–º –±–∞—Ä–º–µ–Ω—Å–∫—É—é —à—Ç—É–∫—É.\n"
                                "–¢—ã —Å–ø—Ä–æ—Å–∏—à—å –∑–∞—á–µ–º?\n"
                                "–ê —è —Ç–µ–±–µ —Å–∫–∞–∂—É, —á—Ç–æ –º–Ω–µ —ç—Ç–∞ —Ñ–∏–≥–Ω—è —Ç–æ–∂–µ –Ω–µ –Ω—É–∂–Ω–∞.")
    time.sleep(1)
    response = npc.share_item()
    if '-' in response:
        photo_name = response.split()[0]
        photo = FSInputFile(f'images/bartender/{photo_name}.jpeg')
        await callback_query.answer_photo(photo, has_spoiler=False)
    await callback_query.answer("üó£ " + response)
