from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time

from database.get_db import get_enemy_info, get_user_data, get_count_defeated_enemy
from . import npc
from . import main_buttons, handlers
from players_classes import Protagonist, Enemy
from bot import bot


def talk_to_enemy_keyboard(enemy_id: int, enemy: Enemy) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤—Ä–∞–≥–æ–º.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - enemy_id: ID –≤—Ä–∞–≥–∞.
    - enemy: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞–≥–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤—Ä–∞–≥–æ–º.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –£ –º–µ–Ω—è –ø—Ä–∏—Å—Ç—É–ø —Å–æ—Ü–∏–æ—Ñ–æ–±–∏–∏ ‚ùå",
                    callback_data="characters")
    keyboard.button(text="–°–ª—ã—à, —É–ª–∏—Ç–∫–∞, –ø–æ–≥–æ–≤–æ—Ä–∏–º?",
                    callback_data=f"talkenemy_{enemy_id}_dialogue")
    keyboard.button(text="–ì–æ –∫—Ç–æ –∫–æ–≥–æ –ø–µ—Ä–µ–ø—å—ë—Ç?",
                    callback_data=f"talkenemy_{enemy_id}_drink")
    keyboard.button(text=f"–ö—Ç–æ {enemy.name} –ø–æ –∂–∏–∑–Ω–∏?",
                    callback_data=f"talkenemy_{enemy_id}_info")
    return keyboard.adjust(1)


async def choose_enemy_to_talk(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞–≥–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback_data.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    enemy_id = int(data.split("_")[1])
    enemy = get_enemy_info(enemy_id)
    if enemy:
        response = (f"{npc.DEFEATED_ENEMY.get(enemy.defeated)} {enemy.type} {enemy.name} –±—ã–∫—É–µ—Ç –Ω–∞ —Ç–µ–±—è.\n\n"
                    "–†–∞–∑–±–µ—Ä–∏—Å—å –ø–æ-–º—É–∂—Å–∫–∏ —Å –Ω–∏–º.\n"
                    "–¢—ã –≤–æ–æ–±—â–µ —É–ª–∏—Ç–∫–∞ –∏–ª–∏ —Å–æ–ø–ª—è –∫–∞–∫–∞—è-—Ç–æ?")
        await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
        keyboard = talk_to_enemy_keyboard(enemy_id, enemy)
        await callback_query.answer(response, reply_markup=keyboard.as_markup())
    else:
        await callback_query.answer("–ë–∞—Ä–º–µ–Ω—ã —Å–ª–æ–º–∞–ª–∏—Å—å –∏ –Ω–µ —Ö–æ—Ç—è—Ç —Å –≤–∞–º–∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å")


async def talk_to_enemy(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –≤—Ä–∞–≥–æ–º.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback_data.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    data_parts = data.split('_')
    enemy_id = int(data_parts[1])
    interaction_type = data_parts[2]
    enemy = get_enemy_info(enemy_id)
    if interaction_type == "dialogue":
        await callback_query.answer("üó£ " + enemy.dialogue)
    elif interaction_type == "info":
        response = enemy.whoisenemy()
        await callback_query.answer("üó£ " + response)
    if interaction_type == "drink":
        await what_drink(callback_query, enemy_id, enemy, user_id)
    else:
        await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö",
                        callback_data=f"enemy_{enemy_id}")
        time.sleep(1)
        await callback_query.answer("üó£ –ß—Ç–æ–æ–æ–æ? –ù–µ—á–µ–≥–æ –º–Ω–µ –≤–æ–∑—Ä–∞–∑–∏—Ç—å? "
                                    "–ü—Ä–∏—à–ª–∞ —Ç—É—Ç —É–ª–∏—Ç–∫–∞ —Å–æ–ø–ª–∏–≤–∞—è, –æ—Ç —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç.\n–í–∞–ª–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ.", reply_markup=keyboard.as_markup())


async def what_drink(callback_query: CallbackQuery, enemy_id: int, enemy: Enemy, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞ –¥–ª—è –±–∏—Ç–≤—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - enemy_id: ID –≤—Ä–∞–≥–∞.
    - enemy: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞–≥–µ.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    knowledge = get_user_data("knowledge", user_id)
    intoxication_level = get_user_data("intoxication_level", user_id)
    alcohol_knowledge = get_user_data("alcohol_knowledge", user_id)
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()

    if intoxication_level >= 10000:
        response = ("üó£ –ö—É–¥–∞ —Ç–µ–±–µ –ø–∏—Ç—å —Ç–æ, —Ç—ã –¥—É—Ä—ë—Ö–∞. –ù–∏–∑—è-–Ω–∏–∑—è, –∏–¥–∏ —Ç—Ä–µ–∑–≤–µ–π.")
    elif len(alcohol_knowledge) == 0:
        response = ("üó£ –¢—ã –µ—â—ë —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏ –Ω–µ—Å–º—ã—à–ª–µ–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–∏—Ç—å.\n"
                    "–ò–¥–∏ –ª—É—á—à–µ –º–æ–ª–æ—á–∫–∞ –ø–æ–ø–µ–π, –º–æ–∂–µ—Ç —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–≤–æ–µ–º—É —É–º—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.")
    elif knowledge < enemy.knowledge:
        response = ("üó£ –Ø —Ç–µ–±—è –Ω–µ —É–≤–∞–∂–∞—é, —á—Ç–æ–± —Å —Ç–æ–±–æ–π –ø–∏—Ç—å.\n"
                    "–£ —Ç–µ–±—è –¥–∞–∂–µ —É—Ä–æ–≤–µ–Ω—å –∞–π–∫—å—é –Ω–∏–∂–µ, —á–µ–º —É –º–µ–Ω—è, –Ω–µ –≥–æ–≤–æ—Ä—è –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ —É–ª–∏—Ç–∫–∞.")
    else:
        response = "üó£ –ß—Ç–æ –ø–∏—Ç—å –±—É–¥–µ–º?\n\n–£—á—Ç–∏, —Ç—É—Ç –≤—Å—ë –ø—å—é—Ç —Ç–æ–ª—å–∫–æ —à–æ—Ç–∞–º–∏.\n–ï—Å–ª–∏ —Å—Å—ã—à—å, –ª—É—á—à–µ —Å—Ä–∞–∑—É —Å–¥–∞–π—Å—è."
        for alco in alcohol_knowledge.keys():
            keyboard.button(
                text=f"üí• {alco} üí•", callback_data=f"drinkenemy_{alco}_{enemy_id}")

    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"enemy_{enemy_id}")
    keyboard.adjust(2) if len(alcohol_knowledge) > 5 else keyboard.adjust(1)
    await callback_query.answer(response, reply_markup=keyboard.as_markup())


async def drink_enemy(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞ –¥–ª—è –≤—Ä–∞–≥–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback_data.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    data_parts = data.split('_')
    alco = data_parts[1]
    enemy_id = int(data_parts[2])
    enemy = get_enemy_info(enemy_id)
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    count = get_count_defeated_enemy(user_id)
    if count >= 5 or enemy.defeated:
        await handle_defeated_enemy(callback_query, enemy, alco, enemy_id, keyboard)
    else:
        await handle_enemy_drinking(callback_query, enemy, alco, enemy_id, user_id, count, keyboard)


async def handle_defeated_enemy(callback_query: CallbackQuery, enemy: Enemy, alco: str, enemy_id: int, keyboard: InlineKeyboardBuilder) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤—Ä–∞–≥ —É–∂–µ –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - enemy: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞–≥–µ.
    - alco: –ù–∞–ø–∏—Ç–æ–∫, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    - enemy_id: ID –≤—Ä–∞–≥–∞.
    - keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"characters")
    if enemy.defeated:
        await callback_query.answer(f"üó£ –ù–µ, —Ä–æ–¥–Ω–µ–Ω—å–∫–∞—è, —Ç–≤–æ—è –≤–∑—è–ª–∞, —è —Å–ª–∞–±–∞–∫ –∏ —á–µ–ø—É—à–∏–ª–∞.\n\n"
                                    f"–Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –ø–∏—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ {alco.lower()}", reply_markup=keyboard.as_markup())
    else:
        await callback_query.answer(f"üó£ –ù–∏–∫—Ç–æ —Å —Ç–æ–±–æ–π –±–æ–ª—å—à–µ –ø–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç. "
                                    f"–ù–∏ {alco.lower()}, –Ω–∏ —á—Ç–æ-–ª–∏–±–æ –¥—Ä—É–≥–æ–µ. –£—Ö–æ–¥–∏ –æ—Ç—Å—é–¥–∞.", reply_markup=keyboard.as_markup())


async def handle_enemy_drinking(callback_query: CallbackQuery, enemy: Enemy, alco: str, enemy_id: int, user_id: int, count: int, keyboard: InlineKeyboardBuilder) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–∏–≤–∫–∏ —Å –≤—Ä–∞–≥–æ–º.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - enemy: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞–≥–µ.
    - alco: –ù–∞–ø–∏—Ç–æ–∫, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    - enemy_id: ID –≤—Ä–∞–≥–∞.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    - keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    alcohol_knowledge = get_user_data("alcohol_knowledge", user_id)
    await callback_query.answer(f"üó£ –û–≥–æ, {alco.lower()} - —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä.\n"
                                "–•–æ—Ç—è –∫–æ–≥–¥–∞ —Ç—ã —É–ª–∏—Ç–∫–∞ –≤ –±–∞—Ä–µ –¥–ª—è —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä.\n"
                                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —Ä–æ–¥–Ω–∞—è, —á–µ–º —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —Å–µ–±—è —Ç—Ä–∞–≤–∏—Ç—å:\n\n"
                                f"{alco} - {str(alcohol_knowledge.get(alco))}")

    await callback_query.answer(f"–ë–∞—Ä–º–µ–Ω {enemy.name} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫:")
    enemy_dice_message = await bot.send_dice(user_id, emoji="üé≤")
    enemy_dice_value = enemy_dice_message.dice.value
    response, finish = enemy.drink(enemy_dice_value, count)
    time.sleep(5)
    for i in response:
        await callback_query.answer(i)
        time.sleep(1)
    if finish:
        keyboard.button(text="üëë –ë—ã—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º! üëë",
                        url="https://www.youtube.com/watch?v=ziR_C0TXW2Q")
        await callback_query.answer(f"–ú–∞–º–∞-–º–∏—è, –¥–∞ —Ç—ã –≤—Å–µ—Ö –ø–µ—Ä–µ—Ä–ø–∏–ª.\n"
                                    "–î–∞ —Ç—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–µ–Ω.\n–¢—ã –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º.\n–¢—ã - –ª–µ–≥–µ–Ω–¥–∞!", reply_markup=keyboard.as_markup())
        time.sleep(5)
        await winner(callback_query, user_id)
    else:
        handlers.user_states[user_id] = "awaiting_dice"
        keyboard.button(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤",
                        callback_data=f"drinksnail_{enemy_id}")
        await callback_query.answer(f"–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫.\n–ù–µ —Å—Å—ã, {alco.lower()} - —ç—Ç–æ –≤–∫—É—Å–Ω–æ.", reply_markup=keyboard.as_markup())


async def drink_snail(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback_data.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    handlers.user_states[user_id] = "OK"
    enemy_id = int(data.split("_")[1])
    await callback_query.answer("–¢—ã –±—Ä–æ—Å–∞–µ—à—å –∫—É–±–∏–∫:")
    user_dice_message = await bot.send_dice(user_id, emoji="üé≤")
    user_dice_value = user_dice_message.dice.value
    protagonist = Protagonist(user_id, 'default')
    response = protagonist.drink(user_dice_value)
    time.sleep(5)
    for i in response:
        await callback_query.answer(i)
        time.sleep(1)

    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"enemy_{enemy_id}")
    await callback_query.answer(f"–•–æ—Ä–æ—à –ø–∏—Ç—å, –∏–¥–∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏—Å—å.", reply_markup=keyboard.as_markup())


async def winner(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã —Å –ø–æ–±–µ–¥–æ–π.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = InlineKeyboardBuilder()
    await callback_query.answer("üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –º–æ–π —é–Ω—ã–π –∞–ª–∫–æ–≥–æ–ª–∏–∫, —Ç—ã - –ø–æ–±–µ–¥–∏–ª! üî•")
    keyboard.button(text="–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data=f"new_game")
    keyboard.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–ª–æ–Ω—è—Ç—Å—è —Ç—É—Ç –±–µ–∑ –¥–µ–ª–∞",
                    callback_data=f"to_do")
    keyboard.button(text="–ë—Ä–æ—Å–∏—Ç—å –ø–∏—Ç—å", callback_data=f"anti_winner")
    keyboard.adjust(1)
    await callback_query.answer(f"–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard.as_markup())


async def anti_winner(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –ø–æ–±–µ–¥—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    await callback_query.answer("ü§£ –ù–µ –ø–æ–º–æ–∂–µ—Ç –∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞–∞—Ö ü§£")
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"winner")
    await callback_query.answer(f"–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard.as_markup())
