from aiogram import types
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from . import npc

from . import location, main_buttons
from database.initialization_db import create_enemy, create_new_user, create_npc, create_quest
from database.get_db import get_user_data, get_npc_list, get_enemy_list, reset_user_data
from players_classes import Protagonist


async def send_welcome(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user = get_user_data("id", user_id)
    if user is None:
        create_new_user(user_id, user_name)
        create_npc(user_id)
        create_enemy(user_id)
        create_quest(user_id)
        welcome_text = (f"üêå –ü—Ä–∏–≤–µ—Ç, {user_name}! –¢—ã - —É–ª–∏—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—à–ª–∞ –≤ –±–∞—Ä.\n"
                        "–û–±—â–∞–π—Å—è —Å –º–µ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–ø–∏—Ç—å –±–∞—Ä–º–µ–Ω–æ–≤, –≤–µ–¥—å —ç—Ç–æ —Ç–≤–æ–∏ –∑–ª–µ–π—à–∏–µ –≤—Ä–∞–≥–∏!\n"
                        "–£–∑–Ω–∞–≤–∞–π –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∫–æ–∫—Ç–µ–π–ª–µ–π –∏ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏, "
                        "—á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Ç—å –±–æ–ª–µ–µ —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –º–µ–Ω—å—à–µ –ø—å—è–Ω–µ—Ç—å.\n"
                        "–ü–æ–±–µ–¥–∏ –≤—Å–µ—Ö –∏ —Å—Ç–∞–Ω—å —Å–∞–º–æ–π \"–¥–∞ —è –Ω–µ –≤–∞—â–µ –Ω–µ –ø—å—è–Ω–∞—è, —è —Å–µ–±—è –∫–æ–Ω—Ç—Ä–æ... –ò–ö ...–ª–∏—Ä—É—é\" —É–ª–∏—Ç–∫–æ–π!\n\n"
                        "–£–¥–∞—á–∏ –∏ –≤–∫—É—Å–Ω–æ–π –∏–≥—Ä—ã!")
        await message.answer(welcome_text)
        await send_rules(message)
    else:
        await message.answer("üêå –î–æ—Ä–æ–≥—É—à–∞, —Ç—ã –∑–∞–±—ã–ª–∞? –¢—ã —É–∂–µ —Ç—É—Ç –±—ã–ª–∞.\n"
                             "–ê –Ω—É –±—ã—Å—Ç—Ä–æ –≤—ã–ø–∏–ª–∞ —à—Ç—Ä–∞—Ñ–Ω—É—é –∏ –≥–æ –∏–≥—Ä–∞—Ç—å.")
        await main_buttons.send_main_menu(message, user_id)


async def send_info(message: types.Message, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    protagonist = Protagonist(user_id, 'default')
    response = protagonist.whoami()
    if not response:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–ø–∞–ª –≤ –Ω–∞—à —à–∏–∫–∞—Ä–Ω—ã–π –±–∞—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
    else:
        await message.answer(response)
        await main_buttons.deactivate_buttons(message, user_id, message.message_id)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data="send_main_menu")
        await message.answer("–í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫ –∏ –Ω–∏–∫–∞–∫ –∏–Ω–∞—á–µ.\n\n"
                             "–ò–¥–∏ –µ—â—ë –ø–æ—Ç—ã–∫–∞–π—Å—è, —É–∑–Ω–∞–π –æ —Å–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ–≤–æ–µ.", reply_markup=keyboard.as_markup())


async def send_inventory(message: types.Message, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = get_user_data("id", user_id)
    if user is None:
        await message.answer("–¢–≤–æ–∏ –∫–∞—Ä–º–∞–Ω—ã –ø—É—Å—Ç—ã, –±—Ä–∞—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –µ—â—ë –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /start")
    else:
        await main_buttons.deactivate_buttons(message, user_id, message.message_id)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ß—Ç–æ —Ç–∞–º –ø–æ –∞–ª–∫–æ–≥–æ–ª—é?",
                        callback_data="inventory_knowledge")
        keyboard.button(text="–ß—Ç–æ —Ç–∞–º –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º?",
                        callback_data="inventory_recipes")
        keyboard.button(text="–ß—Ç–æ —Ç–∞–º –ø–æ –±–∞—Ä–º–µ–Ω—Å–∫–∏–º —à—Ç—É–∫–∞–º?",
                        callback_data="inventory_items")
        keyboard.button(text="–ß—Ç–æ —Ç–∞–º –ø–æ –Ω–∏—à—Ç—è–∫–∞–º?",
                        callback_data="inventory_other")
        keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data="my_snail")
        keyboard.adjust(1)
        await message.answer("–î–µ—Ä–∂–∏ —Å–≤–æ–π –±–∞–≥–∞–∂, –¥—Ä—É–∂–æ—á–µ–∫-–ø–∏—Ä–æ–∂–µ—á–µ–∫.\n–¢—ã–∫–∞–π –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∏–∑–≤–∏–ª–∏–Ω—É —Ç–≤–æ–µ–≥–æ —É–ª–∏—Ç–æ—á–Ω–æ–≥–æ –º–æ–∑–≥–∞.", reply_markup=keyboard.as_markup())


async def send_characters(message: types.Message, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    location_id = get_user_data("current_location_id", user_id)
    if location_id:
        npc_list = await get_npc_list(location_id, user_id)
        enemy_list = await get_enemy_list(location_id, user_id)

        if npc_list or enemy_list:
            response = ("–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–≤–∞—Ä–∏ –∏ –∏–º–µ–Ω–Ω–æ —Ç—É—Ç –æ–Ω–∏ –æ–±–∏—Ç–∞—é—Ç\n\n"
                        "–í—ã–±–∏—Ä–∞–π –ª—é–±—É—é –∏ —Ç—ã–∫–∞–π –Ω–∞ –Ω–µ—ë, –º–æ–∂–µ—Ç —á—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ —É–∑–Ω–∞–µ—à—å.")
            await main_buttons.deactivate_buttons(message, user_id, message.message_id)
            keyboard = await npc.create_character_keyboard(npc_list, enemy_list)
        else:
            response = "–£–ø—Å—Å—Å—Å—Å. –ù–∞ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. –ù–µ –∑–Ω–∞—é, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ –Ω–∞–∂–º–∏ –Ω–∞ /start"
        await message.answer(response, reply_markup=keyboard.as_markup())
    else:
        await message.answer("–ù–∏–∫–æ–≥–æ —Ç—É—Ç –Ω–µ—Ç. –¢–µ–±—è —Ç–æ–∂–µ —Ç—É—Ç –Ω–µ—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É /start")


async def send_location(message: types.Message, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = get_user_data("id", user_id)
    if user is None:
        await message.answer("–õ–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç, –∞ –∑–Ω–∞—á–∏—Ç —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫—É /start.")
    else:
        protagonist = Protagonist(user_id, 'default')
        img_location, response = protagonist.whereami()
        photo = FSInputFile(f'{img_location}')
        await message.answer_photo(photo, has_spoiler=False)
        await message.answer(response)
        await location.move_location(message, user_id, protagonist.current_location_id)


async def send_scheme(message: types.Message, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ –±–∞—Ä–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_location = get_user_data("current_location_id", user_id)
    if user_location is None:
        await message.answer("–°—Ö–µ–º—ã –Ω–µ—Ç, –∞ –∑–Ω–∞—á–∏—Ç —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫—É /start.")
    else:
        photo = FSInputFile(f'images/scheme/scheme_{user_location}.png')
        await message.answer_photo(photo, has_spoiler=False)
        await message.answer("–ú–∞–ª—ã—à–∫–∞ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å? –ú–∞–ª—ã—à–∫–∞ –Ω–µ —Ç–µ—Ä—è–π—Å—è.")
        await location.move_location(message, user_id, user_location)


async def new_game(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    await main_buttons.deactivate_buttons(message, user_id, message.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üë∂ New game üë∂", callback_data="new_game_yes")
    keyboard.button(text="üë¥ Old game üë¥", callback_data="send_main_menu")
    await message.answer("–ß—É–≤–∞–∫, —ç—Ç–æ —Å–µ—Ä—å—ë–∑–Ω—ã–π —à–∞–≥, —Ç—ã —É–≤–µ—Ä–µ–Ω?", reply_markup=keyboard.as_markup())


async def new_game_yes(message: types.Message, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    reset_user_data(user_id)
    await message.answer("–ü—Ä–∏—à–µ–ª –¢–∞–Ω–æ—Å –∏ —Å—Ç–µ—Ä —Ç–µ–±—è —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π –í—Å–µ–ª–µ–Ω–Ω–æ–π.\n–ù–∞–∂–º–∏ /start, —á—Ç–æ–± –≤–æ—Å–∫—Ä–µ—Å–Ω—É—Ç—å.")


async def send_rules(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    user = get_user_data("id", user_id)
    rules_text = (
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n"
        "üî∏ –¢—ã - —É–ª–∏—Ç–∫–∞!\n"
        "üî∏ –£ —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ —É—Ä–æ–≤–µ–Ω—å –∞–π–∫—å—é. –ß–µ–º –æ–Ω –≤—ã—à–µ, —Ç–µ–º –º–µ–Ω—å—à–µ —Ç—ã –ø—å—è–Ω–µ–µ—à—å.\n"
        "üî∏ –ü–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π –∞–π–∫—å—é —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—è—Å—å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, "
        "—É–∑–Ω–∞–≤–∞—è —É –Ω–∏—Ö –Ω–æ–≤—ã–µ –≤–∏–¥—ã –∞–ª–∫–æ–≥–æ–ª—è, —Ä–µ—Ü–µ–ø—Ç—ã –∫–æ–∫—Ç–µ–π–ª–µ–π –∏–ª–∏ –±–∞—Ä–º–µ–Ω—Å–∫–∏–µ –ø—Ä–∏–±–ª—É–¥—ã.\n"
        "üî∏ –ë–∞—Ä–º–µ–Ω—ã - —Ç–≤–æ–∏ –≥–ª–∞–≤–Ω—ã–µ –≤—Ä–∞–≥–∏, –∏—Ö –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Ç—å.\n"
        "üî∏ –£ –±–∞—Ä–º–µ–Ω–æ–≤ —Ç–æ–∂–µ –µ—Å—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–π–∫—å—é, –∏ –µ—Å–ª–∏ –æ–Ω –≤—ã—à–µ —Ç–≤–æ–µ–≥–æ, —Ç–æ –ø–∏—Ç—å —Å —ç—Ç–∏–º –±–∞—Ä–º–µ–Ω–æ–º –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å.\n"
        "üî∏ –ß—Ç–æ–±—ã –ø–µ—Ä–µ–ø–∏—Ç—å –±–∞—Ä–º–µ–Ω–∞ –Ω–∞–¥–æ –≤—ã–∫–∏–Ω—É—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫. –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫—É–±–∏–∫–µ, —Ç–µ–º –≤—ã—à–µ —É—Ä–æ–Ω –æ–ø—å—è–Ω–µ–Ω–∏—é.\n"
        "üî∏ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –∫–≤–µ—Å—Ç—ã. –ó–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å money.\n"
        "üî∏ Money –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ –≤—Å—è–∫—É—é –¥—Ä–µ–±–µ–¥–µ–Ω—å.\n"
        "üî∏ –ï—Å–ª–∏ —Ç—ã —Å–ª–∏—à–∫–æ–º –ø—å—è–Ω - —Å–æ–≤–µ—Ç—É—é —Å—Ö–æ–¥–∏—Ç—å –≤ —Ç—É–∞–ª–µ—Ç –ø—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å—Å—è.\n"
        "üî∏ –í –∏–≥—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–π, –Ω–∞ –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ —Å–≤–æ–∏ –ø—Ä–∏–∫–æ–ª—ã.\n"
        "–ï—Å–ª–∏ –≤—Å—ë —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ –∏–ª–∏ —Ç—ã —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª, —Ç–∞–º –≤–Ω–∏–∑—É –≤ –º–µ–Ω—é –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–æ—á–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç.\n"
        "–í—Ä–æ–¥–µ –≤—Å—ë.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - —ç—Ç–æ —Ç–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã."
    )
    if user is None:
        await message.answer("–ü–æ–∫–∞ –Ω–µ –Ω–∞–∂–º–µ—à—å –∫–Ω–æ–ø–∫—É /start –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω—ã.")
        await message.answer(rules_text)
    else:
        await message.answer(rules_text)
        await main_buttons.send_main_menu(message, user_id)
