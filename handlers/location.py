from aiogram import types
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import random

from players_classes import Protagonist
from database.get_db import get_path_data, get_location_data, get_quest_data, get_user_data, update_quest_data, update_user_data
from . import main_buttons, menu


DIRECTION_ARROWS = {
    "up": "‚¨ÜÔ∏è",
    "left": "‚¨ÖÔ∏è",
    "right": "‚û°Ô∏è",
    "down": "‚¨áÔ∏è"
}

CIGARETTE = [
    "üéµ  2000 –±–∞–∫—Å–æ–≤",
    "üéµ  –ó–∞ —Å–∏–≥–∞—Ä–µ—Ç—É",
    "üéµ  –ò –¥–∞–∂–µ –ø–æ–ª–∂–∏–∑–Ω–∏",
    "üéµ  –ù–µ –∂–∞–ª–∫–æ –∑–∞ —ç—Ç–æ",
    "üéµ  –ß—É—Ç—å-—á—É—Ç—å –ø–æ–∫—É—Ä–∏—Ç—å",
    "üéµ  –ò –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞",
    "üéµ  –ë—É–¥–µ–º –ª–µ—Ç–∞—Ç—å",
    "üéµ  –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –æ—Ç–¥–∞—Ç—å",
    "üéµ  2000 –±–∞–∫—Å–æ–≤!"
]

ROOF = [
    "üéµ  –°–∫–æ—Ä–æ —Ä–∞—Å—Å–≤–µ—Ç,",
    "üéµ  –í—ã—Ö–æ–¥–∞ –Ω–µ—Ç",
    "üéµ  –ö–ª—é—á –ø–æ–≤–µ—Ä–Ω–∏",
    "üéµ  –ò –ø–æ–ª–µ—Ç–µ–ª–∏",
    "üéµ  –ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å",
    "üéµ  –í —á—å—é-—Ç–æ —Ç–µ—Ç—Ä–∞–¥—å",
    "üéµ  –ö—Ä–æ–≤—å—é, –∫–∞–∫ –≤ –º–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω–µ",
    "üéµ  –í—ã—Ö–æ–¥–∞ –Ω–µ—Ç",
    "üéµ  –í—ã—Ö–æ–¥–∞ –Ω–µ—Ç!"
]


async def move_location(message: types.Message, user_id: int, location_id: int = None) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ Message.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - location_id: ID —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not location_id:
        location_id = get_user_data("current_location_id", user_id)
    location_name = get_location_data("name", location_id)
    await main_buttons.deactivate_buttons(message, user_id, message.message_id)
    keyboard = InlineKeyboardBuilder()
    directions = get_path_data(location_id)
    for new_location_id, direction in directions:
        arrow = DIRECTION_ARROWS.get(direction, "")
        new_location_name = get_location_data("name", new_location_id)
        button_text = f"{arrow} {new_location_name}"
        callback_data = f"go_{new_location_id}"
        keyboard.button(text=button_text, callback_data=callback_data)
    keyboard.button(text="üö∑ –ù–∏–∫—É–¥–∞ –Ω–µ –ø–æ–π–¥—É. –¢—É—Ç —É–ø–∞–¥—É.",
                    callback_data="to_do")
    keyboard.adjust(2)
    response = f"üìå –©–∞—Å –º—ã —Ç—É—Ç: {location_name.lower()}\n\n–ù–æ –≤–æ–ø—Ä–æ—Å –≤ –¥—Ä—É–≥–æ–º, –≥–¥–µ –º—ã –æ–∫–∞–∂–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É?"
    await message.answer(response, reply_markup=keyboard.as_markup())


async def go_to_new_location(callback_query: CallbackQuery, user_id: int, data: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ callback_data (ID –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏).
    """
    new_location_id = int(data.split("_")[1])
    protagonist = Protagonist(user_id, 'default')
    protagonist.go(new_location_id)
    img_location, response = protagonist.whereami()
    photo = FSInputFile(f'{img_location}')
    await callback_query.answer_photo(photo, has_spoiler=False)
    await callback_query.answer(response)
    await main_buttons.to_do(callback_query, user_id)


async def find_fun(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    data = get_user_data("current_location_id", user_id)
    if data:
        if data == 4:
            await toilet(callback_query, user_id)
        elif data == 7:
            await hall(callback_query, user_id)
        elif data == 8:
            await market(callback_query, user_id)
        elif data == 6:
            await roof(callback_query, user_id)
        else:
            await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
            response = ("–ù–∏—á–µ–≥–æ —Ç—É—Ç –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.\n\n"
                        "–¢–æ–ª—å–∫–æ –æ–≥—Ä–æ–º–Ω–∞—è –¥—É—à–µ–≤–Ω–∞—è –ø—É—Å—Ç–æ—Ç–∞ –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ.")
            await callback_query.answer(response, reply_markup=keyboard.as_markup())


async def toilet(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç—É–∞–ª–µ—Ç–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer("–¢—ã —á–µ–≥–æ–æ–æ–æ?\n"
                                "–ù–µ –ø—Ä–∏–∑–Ω–∞–ª —á—Ç–æ-–ª–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞?\n"
                                "–°–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∏—â–∞ –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞?")
    time.sleep(1)
    await callback_query.answer("üöΩ –≠—Ç–æ –∂–µ –µ–≥–æ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏—Ç–∞–∑! üöΩ")
    time.sleep(1)
    await callback_query.answer("–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–ª—ã–π —Ç—Ä–æ–Ω –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é, —Ç–æ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–µ–≥—á–∏—Ç—å —Å–≤–æ—é –Ω–æ—à—É –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ –æ–ø—å—è–Ω–µ–Ω–∏—è.\n\n"
                                "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:\n"
                                "1) –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–µ—à—å—Å—è –Ω—É–∂–Ω—ã–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ–º –≤ –¥—ã—Ä–æ—á–∫—É —É–Ω–∏—Ç–∞–∑–∞. "
                                "–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω–∏—Å—å.\n"
                                "2) –ò—Å–ø—É—Å–∫–∞–µ—à—å –∏–∑ —Å–µ–±—è –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å—É–±—Å—Ç–∞–Ω—Ü–∏—é.\n"
                                "3) –í –∫–æ–Ω—Ü–µ –Ω–∞–∂–∏–º–∞–µ—à—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –∏ –≥—Ä—è–∑—å —É—Ö–æ–¥–∏—Ç.\n")
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ò∫Ô∏è Use toilet ‚ò∫Ô∏è", callback_data=f"toilet")
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
    time.sleep(1)
    await callback_query.answer("–°—Å—ã–º –∏–ª–∏ –Ω–µ —Å—Å—ã–º?", reply_markup=keyboard.as_markup())


async def use_toilet(callback_query: CallbackQuery, user_id: int, user_name: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ç–∞–∑–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer("ü§Æ –ö—Ö—Ä–µ–µ–µ –∫—Ö—Ä–µ–µ –∫—Ö—Ä–µ–µ–µ–µ–µ ü§Æ")
    time.sleep(0.5)
    await callback_query.answer("üí¶ –ü–∏—Å—å –ø–∏–∏–∏—Å—å –ø–∏–∏–∏–∏–∏–∏–∏—Å—å üí¶")
    time.sleep(0.5)
    await callback_query.answer("üí© –ë—É–ª—å–∫ –±—É–ª—å–∫ –±—É—É—É—É–ª—å–∫ üí©")
    time.sleep(0.5)
    await callback_query.answer("*–ó–≤—É–∫–∏ —Å–º—ã–≤–∞ —É–Ω–∏—Ç–∞–∑–∞*")
    time.sleep(0.5)
    await callback_query.answer(f"üëç Well done, {user_name}, well done! üëç")
    time.sleep(0.5)
    intoxication = get_user_data("intoxication_level", user_id)
    if intoxication >= 1000:
        intoxication -= 1000
        update_user_data("intoxication_level", intoxication, user_id)
        await callback_query.answer(f"–ë–ª–∞–≥–æ–¥–∞—Ä—è –¥–∞–Ω–Ω–æ–π –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Ç–µ–±–µ —É–¥–æ–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ç—Ä–µ–∑–≤–µ—Ç—å.\n–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—å—è–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç {intoxication // 1000} –∏–∑ 10.")
    else:
        await callback_query.answer(f"–¢—Ä–µ–∑–≤–µ—Ç—å —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ–∫—É–¥–∞, –Ω–æ –∑–∞—Ç–æ –ø–æ–ª—É—á–∏–ª —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –ø—Ä–∞–≤–¥–∞ –∂–µ?")
    time.sleep(0.5)
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ò∫Ô∏è –ï—â—ë use ‚ò∫Ô∏è", callback_data=f"toilet")
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
    await callback_query.answer("–ù—É –≤–æ—Ç, —É–º–Ω–∏—á–∫–∞.\n–ó–∞–ø–æ–º–Ω–∏ - —ç—Ç–∞ –±–µ–ª–∞—è —à—Ç—É–∫–∞ - —Ç–≤–æ—è –ø–æ–¥—Ä—É–≥–∞.\n–ü—Ä–∏—Ö–æ–¥–∏ —Å—é–¥–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–ª–æ—Ö–æ.", reply_markup=keyboard.as_markup())


async def hall(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer("–ö–ª–∞—Å—Å–Ω—ã–π —Ç—É—Ç –≤–∞–π–± –≤—Å—ë-—Ç–∞–∫–∏.\n–≠—Ç–æ –ª—É—á—à–∏–π –±–∞—Ä, —á—Ç–æ–± –Ω–∞–ø–∏—Ç—å—Å—è –≤ —Å–æ–ø–µ–ª—å–∫–∏!")
    time.sleep(1)
    await callback_query.answer("–¢–∞–∞–∞–∫, –∞ —ç—Ç–æ —á—Ç–æ —É –Ω–∞—Å —Ç–∞–∫–æ–µ?\n\n–ú–¥–∞–∞–∞–∞–∞\n\n–ù–µ–æ–Ω–æ–≤–∞—è –≤—ã–≤–µ—Å–∫–∞, —á—Ç–æ–± –≤—Å—è–∫–∏–µ –ø—å—è–Ω—ã–µ —Ç—É–ø—ã–µ –º–∞–ª–æ–ª–µ—Ç–∫–∏ –¥–µ–ª–∞–ª–∏ –µ—â—ë –±–æ–ª–µ–µ —Ç—É–ø—ã–µ —Å–µ–ª—Ñ–∏?")
    time.sleep(1)
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="ü§≥ –°–¥–µ–ª–∞—Ç—å —Å–µ–ª—Ñ–∏ ü§≥", callback_data=f"selfie")
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
    await callback_query.answer("–Ø, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –º–∞–ª–æ–ª–µ—Ç–∫–∞, –Ω–æ –≤—Å—ë —Ç–∞–∫–∞—è –∂–µ –ø—å—è–Ω–∞—è –∏ —Ç—É–ø–∞—è.\n–ü—É-–ø—É-–ø—É—É—É—É—É—É", reply_markup=keyboard.as_markup())


async def use_hall(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ä–∏–¥–æ—Ä–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer("–Ø —Ç–∞–∫–∞–∞–∞–∞–∞–∞—è –∫—Ä–∞—Å–∏–≤–∞—è—è—è—è—è—è—è—è—è—è")
    i = random.randint(1, 8)
    photo = FSInputFile(f'images/selfie/snail_{i}.jpeg')
    await callback_query.answer_photo(photo, has_spoiler=True)
    count_selfie = get_quest_data("count", "Selfie", user_id)
    update_quest_data("count", count_selfie + 1, "Selfie", user_id)
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="ü§≥ –°–¥–µ–ª–∞—Ç—å –µ—â—ë —Å–µ–ª—Ñ–∏ ü§≥", callback_data=f"selfie")
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
    await callback_query.answer("–ì–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ —Ñ–æ—Ç–æ, –∫–æ–≥–¥–∞ –±—É–¥—É —Ç—Ä–µ–∑–≤–æ–π.", reply_markup=keyboard.as_markup())


async def roof(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫—Ä—ã—à–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer("–ú–º–º–º–º, –∫–∞–∫–æ–π –≤–∏–¥, –∫–∞–∫–∞—è –∫—Ä–∞—Å–æ—Ç–∞.")
    time.sleep(1)
    await callback_query.answer("–ï–±–∞–∞–∞–∞–∞, –∞ –∫–∞–∫ –≤—ã—Å–æ–∫–æ —Ç–æ...")
    time.sleep(1)
    await callback_query.answer("... –∞ –≤–æ—Ç –±—ã —Å–ø—Ä—ã–≥–Ω—É—Ç—å —Å –∫—Ä—ã—à–∏ –∞—Ö–∞—Ö–∞—Ö–∞ ...")
    time.sleep(1)
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üßö –ü—Ä—ã–≥ —Å –∫—Ä—ã—à–∏ üßö", callback_data=f"roof")
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
    await callback_query.answer("–°–µ–π—á–∞—Å –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞.\n–°–µ–π—á–∞—Å –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞.\n–°–µ–π—á–∞—Å –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞.\n", reply_markup=keyboard.as_markup())


async def use_roof(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫—Ä—ã—à–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    count_fall = get_quest_data("count", "Roof", user_id) + 1
    update_quest_data("count", count_fall, "Roof", user_id)
    if count_fall <= 2:
        await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
        await callback_query.answer("–¢—ã —á—ë, –¥—É—Ä–æ—á–æ–∫ —Å–æ–≤—Å–µ–º?\n–ò–¥–∏ –æ—Ç—Å—é–¥–∞, –ø–æ–∫–∞ –∂–∏–≤.\n", reply_markup=keyboard.as_markup())
    else:
        for i in ROOF:
            await callback_query.answer(i)
            time.sleep(1)
        await callback_query.answer("üëºüèª –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–ø–∞–ª –∏ —Ä–∞–∑–±–∏–ª—Å—è –≤ —à–º–∞–∫–æ–¥—è–≤–∫—É üëºüèª\n\n–ò–¥–∏, –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
        time.sleep(1)
        await menu.new_game_yes(callback_query, user_id)


async def market(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.answer("–û–π, –∞ –æ—Ç–∫—É–¥–∞ —Ç–∞–∫–∏–µ —Ö–∏–ª–∏–Ω—å–∫–∏–µ –æ–≥–æ–Ω–µ—á–∫–∏ —Å–≤–µ—Ç–∏—Ç—Å—è?\n–î–∞ —ç—Ç–æ –∂–µ –Ω–æ—á–Ω–æ–π –ª–∞—Ä—ë–∫.")
    time.sleep(1)
    await callback_query.answer("–û–π, –∞ –∫—Ç–æ —ç—Ç–æ —Ç–∞–º —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–≤—â–∏—Ü–∞?\n\n–î–∞ —ç—Ç–æ –∂–µ –º–æ—è –ª—é–±–∏–º–∞—è —Ç–µ—Ç—è –í–∞—Å—è.")
    time.sleep(1)
    await callback_query.answer("üòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòçüòç\n\n–°–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∏ —Å–∞–º–∞—è —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è —Ç–µ—Ç—è –í–∞—Å—è.")
    time.sleep(1)
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üõí –ó–∞–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω üõí", callback_data=f"market")
    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
    await callback_query.answer("–ù–∞–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Ç—É–¥–∞ –Ω–∞–¥–æ –∑–∞–π—Ç–∏. "
                                "–°–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –º—è—Å–æ –∏ —Å–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è –ø–∞–ª—ë–Ω–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–∞–º –∏ –Ω–∏–≥–¥–µ –±–æ–ª—å—à–µ.", reply_markup=keyboard.as_markup())


async def use_market(callback_query: CallbackQuery, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –º–∞–≥–∞–∑–∏–Ω–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    response = ("–ì–æ–¥–∞ –∏–¥—É—Ç, –∞ –∞—Å—Å–∞—Ä—Ç–∏–º–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞—ë—Ç —É–¥–∏–≤–ª—è—Ç—å.\n–í—Ä–æ–¥–µ —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–Ω–≥–µ, –Ω–∞–¥–æ –∫—É–ø–∏—Ç—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é —Ö–µ—Ä—å.")
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()

    keyboard.button(text="üåπ –¶–≤–µ—Ç—ã –¥–ª—è –ª—é–±–∏–º–æ–π —É–ª–∏—Ç–æ—á–∫–∏ üåπ",
                    callback_data=f"buy_flower")
    keyboard.button(text="üîû –ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ã \"–ì–æ—Ä–æ—Å–∫–æ–ø\" üîû",
                    callback_data=f"buy_condom")
    keyboard.button(text="ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω ü•ê", callback_data=f"buy_croissant")
    keyboard.button(text="üêü –ì–æ—Ä–±—É—à–∞ üêü", callback_data=f"buy_fish")
    keyboard.button(text="üíä –ê—Å–ø–∏—Ä–∏–Ω üíä", callback_data=f"buy_pill")
    keyboard.button(text="üåª –°–µ–º–µ—á–∫–∞ üåª", callback_data=f"buy_seed")
    keyboard.button(text="üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã üö¨", callback_data=f"buy_cigarette")

    keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥, –ø–ª–∏–∑ ‚¨Ö", callback_data=f"to_do")
    keyboard.adjust(1)
    await callback_query.answer(response, reply_markup=keyboard.as_markup())


async def buy_market(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã—Ö.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()

    product = data.split('_')[1]
    if product == 'flower':
        await callback_query.answer("üåπ –ó–Ω–∞—á–∏—Ç —Ü–≤–µ—Ç–æ—á–∫–∏?")
        await callback_query.answer("–ù–∞ –ª—é–±–∏–º—ã—Ö —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–µ–ª—å–∑—è. –¢–∞–∫ —á—Ç–æ —ç—Ç–∏ –≤–æ–ª—à–µ–±–Ω—ã–µ flowers —Å—Ç–æ—è—Ç 800 –¥–µ–Ω—è–∫.")
        keyboard.button(text="–î–∞", callback_data=f"pay_800_–¶–≤–µ—Ç–æ—á–∫–∏")
    elif product == 'condom':
        await callback_query.answer("üîû –ó–Ω–∞—á–∏—Ç –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ã?")
        await callback_query.answer("–õ—É—á—à–µ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–ª–∞—Ç–∏—Ç—å 500, —á–µ–º –ø–æ—Ç–æ–º –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ 100500 —É–ª–∏—Ç–æ—á–Ω—ã–º –æ—Ç–ø—Ä—ã—Å–∫–∞–º.")
        keyboard.button(text="–î–∞", callback_data=f"pay_500_–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ã")
    elif product == 'croissant':
        await callback_query.answer("ü•ê –ó–Ω–∞—á–∏—Ç –∫—Ä—É–∞—Å—Å–∞–Ω?")
        await callback_query.answer("–°–ª–∞–¥–µ–Ω—å–∫–∏—Ö –±—É–ª–æ—á–µ–∫ –≤—Å–µ –ª—é–±—è—Ç, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–æ 150 –¥–µ–Ω–µ–≥ –∏ –¥–∏–∞–±–µ—Ç —Ç–≤–æ–π.")
        keyboard.button(text="–î–∞", callback_data=f"pay_150_–ö—Ä—É–∞—Å—Å–∞–Ω—ã")
    elif product == 'fish':
        await callback_query.answer("üêü –ó–Ω–∞—á–∏—Ç –≥–æ—Ä–±—É—à–∞?")
        await callback_query.answer("–ó–∞—á–µ–º —Ç–µ–±–µ –≥–æ—Ä–±—É—à–∞? –ó–∞—á–µ–º —Ç–µ–±–µ –±–ª–∏–Ω –≥–æ—Ä–±—É—à–∞? –õ–∞–¥–Ω–æ, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—à—å, —Ç–æ 1000 –¥–µ–Ω—è–∫ –∏ –≤–∫—É—Å —Ä—ã–±—ã —Ç–µ–±–µ –æ–±–µ—Å–ø–µ—á–µ–Ω.")
        keyboard.button(text="–î–∞", callback_data=f"pay_1000_–ì–æ—Ä–±—É—à–∞")
    elif product == 'pill':
        await callback_query.answer("üíä –ó–Ω–∞—á–∏—Ç –∞—Å–ø–∏—Ä–∏–Ω?")
        await callback_query.answer("–ß—Ç–æ, –Ω–µ–º–æ–ª–æ–¥–æ–π —É–∂–µ, —Ä–∞–∑ –∞—Å–ø–∏—Ä–∏–Ω—á–∏–∫ –Ω–∞ —É—Ç—Ä–æ –±–µ—Ä–µ—à—å? –ë–µ—Ä–∏, –±–µ—Ä–∏, –º–æ–π –º–∏–ª—ã–π, 200 –¥–µ–Ω—è–∫ –∏ —Ç—ã –±—É–¥–µ—à—å –∂–∏—Ç—å –µ—â—ë –¥–µ–Ω—ë–∫.")
        keyboard.button(text="–î–∞", callback_data=f"pay_200_–ê—Å–ø–∏—Ä–∏–Ω")
    elif product == 'seed':
        await callback_query.answer("üåª –ó–Ω–∞—á–∏—Ç —Å–µ–º–µ—á–∫–∞?")
        await callback_query.answer("–¢—ã –¥—É—Ä–æ—á–æ–∫? –ó–∞—á–µ–º —Ç–µ–±–µ –æ–¥–Ω–∞ —Å–µ–º–µ—á–∫–∞? –û–±—Å–æ—Å–∞—Ç—å –µ—ë –∏ –≥–æ–ª—É–±—è–º —Å–∫–æ—Ä–º–∏—Ç—å? –õ–∞–¥–Ω–æ, 1 –º–æ–Ω–µ—Ç–∫–∞ - 1 —Å–µ–º–µ—á–∫–∞.")
        keyboard.button(text="–î–∞", callback_data=f"pay_1_–°–µ–º–µ—á–∫–∞")
    elif product == 'cigarette':
        for i in CIGARETTE:
            await callback_query.answer(i)
            time.sleep(1)
        keyboard.button(text="–î–ê", callback_data=f"pay_2000_–°–∏–≥–∞—Ä–µ—Ç—ã")

    keyboard.button(text="–ù–ï–¢", callback_data=f"market")
    keyboard.adjust(1)
    await callback_query.answer("–ë—Ä–∞—Ç—å –±—É–¥–µ–º?", reply_markup=keyboard.as_markup())


async def pay(callback_query: CallbackQuery, data: str, user_id: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - callback_query: –û–±—ä–µ–∫—Ç callback_query.
    - data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã—Ö.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await main_buttons.deactivate_buttons(callback_query, user_id, callback_query.message_id)
    keyboard = InlineKeyboardBuilder()

    data_parts = data.split('_')
    cost = int(data_parts[1])
    product = data_parts[2]
    money = get_user_data("money", user_id)
    other_items = get_user_data("other_items", user_id)
    if money >= cost:
        await callback_query.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π –∑–∞ {cost} money.")
        await callback_query.answer(f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –µ—â—ë, –º—ã –±—É–¥–µ–º –≤–∞—Å –∂–¥–∞—Ç—å.\n\n*–¢—ë—Ç—è –í–∞—Å—è –µ—Ö–∏–¥–Ω–æ —É–ª—ã–±–∞–µ—Ç—Å—è*")
        count = other_items.get(product, 0)
        other_items[product] = count + \
            20 if product == '–°–∏–≥–∞—Ä–µ—Ç—ã' else count + 1
        update_user_data("money", money-cost, user_id)
        update_user_data("other_items", other_items, user_id)
        keyboard.button(text="–ö—É–ø–∏—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å", callback_data=f"market")
    else:
        await callback_query.answer(f"–ó–∞–π–∫–∞ –º–æ—è, –¥–∞ —Ç—ã –∂–µ –Ω–∏—â–µ–Ω–∫–∞.\n–ù–∞ —Ç–≤–æ—ë–º —Å—á—ë—Ç—É –≤—Å–µ–≥–æ {money} money.")
        await callback_query.answer("–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —É –º–µ—Å—Ç–Ω—ã—Ö —Ä–µ–±—è—Ç.\n–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —Å —Ç–µ–±—è —É—Å–ª—É–≥–∞, —Å –Ω–∏—Ö –¥–æ—Å—Ç–æ–π–Ω–∞—è –æ–ø–ª–∞—Ç–∞.")
    keyboard.button(text="–£–π—Ç–∏ –Ω–∞—Ñ–∏–≥ –æ—Ç—Å—é–¥–∞", callback_data=f"to_do")
    await callback_query.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=keyboard.as_markup())
